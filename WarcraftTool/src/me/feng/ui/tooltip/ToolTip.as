package me.feng.ui.tooltip{	import flash.display.GradientType;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.events.Event;	import flash.filters.BitmapFilterQuality;	import flash.filters.GlowFilter;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	/**	 * 提示工具框	 * @author Duncan Reid, www.hy-brid.com	 * @date October 17, 2008	 * @version 1.2	 *	 * @author warden_feng 2015-2-9	 *	 * @see https://github.com/duncanreid/ToolTip	 */	public class ToolTip extends Sprite implements IToolTip	{		/** 提示宽度 */		private var tipWidth:Number = 260;		/** 设置对齐方式 */		private var align:String = "right"		/** 是否显示箭头 */		private var showArrows:Boolean = true;		/** 拐角半径 */		private var cornerRadius:Number = 12;		/** 标题文本框 */		private var titleTextField:TextField;		/** 内容文本框 */		private var contentTextField:TextField;		/** 内容容器 */		private var contentContainer:Sprite = new Sprite();		/** 标题格式 */		private var titleFormat:TextFormat;		/** 内容格式 */		private var contentFormat:TextFormat;		/** 默认高度 */		private var defaultHeight:Number;		/** 边缘缓冲宽度 */		private var buffer:Number = 10;		/** 背景颜色 */		private var bgColors:Array = [0xFFFFFF, 0x9C9C9C];		/** 是否自动尺寸 */		private var autoSize:Boolean = false;		/** 箭头尺寸 */		private var arrowsSize:Number = 10;		/** 边框颜色 */		private var borderColor:Number;		/** 边框尺寸 */		private var borderSize:Number = 1;		/** 背景透明度 */		private var bgAlpha:Number = 0.6;		/** 位置偏移量 */		private var offSet:Number;		/** 箭头偏移 */		private var hookOffSet:Number;		/**		 * 创建一个tooltip		 */		public function ToolTip():void		{			//do not disturb parent display object mouse events			mouseEnabled = false;			buttonMode = false;			mouseChildren = false;			titleTextField = createField();			contentTextField = createField();			//初始化标题格式			titleFormat = new TextFormat();			titleFormat.font = "_sans";			titleFormat.bold = true;			titleFormat.size = 20;			titleFormat.color = 0x333333;			//初始化内容格式			contentFormat = new TextFormat();			contentFormat.font = "_sans";			contentFormat.bold = false;			contentFormat.size = 14;			contentFormat.color = 0x333333;			contentContainer.addChild(titleTextField);			contentContainer.addChild(contentTextField);			addChild(contentContainer);			//添加滤镜			var color:Number = 0x000000;			var alpha:Number = 0.35;			var blurX:Number = 2;			var blurY:Number = 2;			var strength:Number = 1;			var inner:Boolean = false;			var knockout:Boolean = false;			var quality:Number = BitmapFilterQuality.HIGH;			contentTextField.filters = titleTextField.filters = [new GlowFilter(color, alpha, blurX, blurY, strength, quality, inner, knockout)];			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		/**		 * 提示数据		 */		public function set data(value:Object):void		{			var title:String = "";			var content:String = "";			if (value == null)			{				content = "null";			}			else if (value is String)			{				content = value as String;			}			else if (value)			{				if (value.hasOwnProperty("title"))				{					title = value["title"];				}				if (value.hasOwnProperty("content"))				{					content = value["content"];				}				if (title.length + content.length == 0)				{					content = String(value);				}			}			// end add			addCopy(title, content);			setOffset();			drawBG();			bgGlow();		}		/**		 * 更新tip位置		 */		public function updatePosition():void		{			if (parent == null)			{				return;			}			var xp:Number = parent.stage.mouseX + offSet;			var yp:Number = parent.stage.mouseY - height - 10;			var overhangRight:Number = tipWidth + xp;			if (overhangRight > stage.stageWidth)			{				xp = stage.stageWidth - tipWidth;			}			if (xp < 0)			{				xp = 0;			}			if ((yp) < 0)			{				yp = 0;			}			x = xp;			y = yp;		}		/**		 * 处理添加到舞台事件		 */		private function onAddedToStage(event:Event):void		{			updatePosition();		}		/**		 * 设置显示内容		 * @param title			标题		 * @param content		内容		 */		private function addCopy(title:String, content:String = null):void		{			titleTextField.htmlText = title;			titleTextField.setTextFormat(titleFormat);			if (autoSize)			{				tipWidth = titleTextField.textWidth + 4 + (buffer * 2);			}			else			{				titleTextField.width = tipWidth - (buffer * 2);			}			titleTextField.x = titleTextField.y = buffer;			//if using content			if (content != null)			{				contentTextField.htmlText = content;				contentTextField.setTextFormat(contentFormat);				var bounds:Rectangle = getBounds(this);				contentTextField.x = buffer;				contentTextField.y = titleTextField.y + titleTextField.textHeight;				if (autoSize)				{					var cfWidth:Number = contentTextField.textWidth + 4 + (buffer * 2)					tipWidth = cfWidth > tipWidth ? cfWidth : tipWidth;				}				else				{					contentTextField.width = tipWidth - (buffer * 2);				}			}		}		/**		 * 创建文本		 * @return 			新文本框		 */		private function createField():TextField		{			var tf:TextField = new TextField();			tf.gridFitType = "pixel";			//tf.border = true;			tf.autoSize = TextFieldAutoSize.LEFT;			tf.selectable = false;			if (!autoSize)			{				tf.multiline = true;				tf.wordWrap = true;			}			return tf;		}		/**		 * 绘制背景		 */		private function drawBG():void		{			/* re-add : 04.29.2010 : clear graphics in the event this is a re-usable tip */			graphics.clear();			/* end add */			var bounds:Rectangle = getBounds(this);			var h:Number = isNaN(defaultHeight) ? bounds.height + (buffer * 2) : defaultHeight;			var fillType:String = GradientType.LINEAR;			//var colors:Array = [0xFFFFFF, 0x9C9C9C];			var alphas:Array = [bgAlpha, bgAlpha];			var ratios:Array = [0x00, 0xFF];			var matr:Matrix = new Matrix();			var radians:Number = 90 * Math.PI / 180;			matr.createGradientBox(tipWidth, h, radians, 0, 0);			var spreadMethod:String = SpreadMethod.PAD;			if (!isNaN(borderColor))			{				graphics.lineStyle(borderSize, borderColor, 1);			}			graphics.beginGradientFill(fillType, bgColors, alphas, ratios, matr, spreadMethod);			if (showArrows)			{				var xp:Number = 0;				var yp:Number = 0;				var w:Number = tipWidth;				graphics.moveTo(xp + cornerRadius, yp);				graphics.lineTo(xp + w - cornerRadius, yp);				graphics.curveTo(xp + w, yp, xp + w, yp + cornerRadius);				graphics.lineTo(xp + w, yp + h - cornerRadius);				graphics.curveTo(xp + w, yp + h, xp + w - cornerRadius, yp + h);				//hook				graphics.lineTo(xp + hookOffSet + arrowsSize, yp + h);				graphics.lineTo(xp + hookOffSet, yp + h + arrowsSize);				graphics.lineTo(xp + hookOffSet - arrowsSize, yp + h);				graphics.lineTo(xp + cornerRadius, yp + h);				graphics.curveTo(xp, yp + h, xp, yp + h - cornerRadius);				graphics.lineTo(xp, yp + cornerRadius);				graphics.curveTo(xp, yp, xp + cornerRadius, yp);				graphics.endFill();			}			else			{				graphics.drawRoundRect(0, 0, tipWidth, h, cornerRadius);			}		}		/**		 * 背景滤镜		 */		private function bgGlow():void		{			var color:Number = 0x000000;			var alpha:Number = 0.20;			var blurX:Number = 5;			var blurY:Number = 5;			var strength:Number = 1;			var inner:Boolean = false;			var knockout:Boolean = false;			var quality:Number = BitmapFilterQuality.HIGH;			var filter:GlowFilter = new GlowFilter(color, alpha, blurX, blurY, strength, quality, inner, knockout);			var myFilters:Array = new Array();			myFilters.push(filter);			filters = myFilters;		}		/**		 * 计算位置		 */		private function setOffset():void		{			switch (align)			{				case "left":					offSet = -tipWidth + (buffer * 3) + arrowsSize;					hookOffSet = tipWidth - (buffer * 3) - arrowsSize;					break;				case "right":					offSet = 0 - (buffer * 3) - arrowsSize;					hookOffSet = buffer * 3 + arrowsSize;					break;				case "center":					offSet = -(tipWidth / 2);					hookOffSet = (tipWidth / 2);					break;				default:					offSet = -(tipWidth / 2);					hookOffSet = (tipWidth / 2);					break;			}		}		/**		 * 清理		 */		private function cleanUp():void		{			titleTextField.filters = [];			filters = [];			contentContainer.removeChild(titleTextField);			titleTextField = null;			if (contentTextField != null)			{				contentTextField.filters = []				contentContainer.removeChild(contentTextField);			}			graphics.clear();			removeChild(contentContainer);			parent.removeChild(this);		}	}}